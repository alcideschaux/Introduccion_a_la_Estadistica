plot(0,xlim=c(-10,10),ylim=c(-10,10),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n", main="Población vs. Muestra")
draw.circle(0,0,7,border="black",col="yellow")
plot(0,xlim=c(-10,10),ylim=c(-10,10),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n", main="Población vs. Muestra")
draw.circle(0,0,7,border="black",col="yellow")
draw.circle(3,0,3,border="black",col="red")
text(-3.5,0,"Población", font=2)
text(3,0,"Muestra", font=2)
library(plotrix)
plot(0,xlim=c(-10,10),ylim=c(-10,10),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n", main="Población vs. Muestra")
draw.circle(0,0,7,border="black",col="yellow")
draw.circle(3,0,3,border="black",col="red")
text(-3.5,0,"Población", font=2)
text(3,0,"Muestra", font=2)
plot(0,xlim=c(-10,10),ylim=c(-10,10),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n", main="Población vs. Muestra")
draw.circle(0,0,6,border="black",col="yellow")
draw.circle(3,0,3,border="black",col="red")
text(-3.5,0,"Población", font=2)
text(3,0,"Muestra", font=2)
plot(0,xlim=c(-10,10),ylim=c(-10,10),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n", main="Población vs. Muestra")
draw.circle(0,0,6.5,border="black",col="yellow")
draw.circle(3,0,3,border="black",col="red")
text(-3.5,0,"Población", font=2)
text(3,0,"Muestra", font=2)
plot(0,xlim=c(-10,10),ylim=c(-10,10),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n", main="Población vs. Muestra")
draw.circle(0,0,6.8,border="black",col="yellow")
draw.circle(3,0,3,border="black",col="red")
text(-3.5,0,"Población", font=2)
text(3,0,"Muestra", font=2)
plot(0,xlim=c(-10,10),ylim=c(-10,10),type="n",xlab="",ylab="",bty="n",xaxt="n",yaxt="n", main="Población vs. Muestra")
draw.circle(0,0,6.7,border="black",col="yellow")
draw.circle(3,0,3,border="black",col="red")
text(-3.5,0,"Población", font=2)
text(3,0,"Muestra", font=2)
# Dot plot
plot(cars$price, rep(1, nrow(cars)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
data(cars)
# Dot plot
plot(cars$price, rep(1, nrow(cars)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
swirlify::testit()
swirlify::testit()
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
caras
cars
# Dot plot
plot(cars$price, rep(1, nrow(cars)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
library(openintro)
?openintro
dotPlot(cars$price, cars$type, key=c('large', 'midsize', 'small'), cex=1:3)
dotPlot(cars$price)
plot(cars$price, rep(1, nrow(cars)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
openintro::cars
abline(v=c(min(cars$price), max(cars$price)), col="red", lwd=3)
# Dot plot
plot(cars$price, rep(1, nrow(cars)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
library(openintro)
library(plotrix)
# Dot plot
plot(cars$price, rep(1, nrow(cars)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
abline(v=c(min(cars$price), max(cars$price)), col="red", lwd=3)
swirlify::testit()
swirlify::testit(25)
swirlify::testit(30)
range(cars$price)
range(cars$price)
range(cars$price)
mean(cars$price)
devtools::install_github("alcideschaux/swirl-spa")
swirlify::testit(25)
swirlify::testit(35)
swirlify::testit(45)
autos <- data(cars)
data(cars)
autos
ls()
cars
openintro::cars
autos <- openintro::cars
View(autos)
colnames(autos)
colnames(autos) <- c("tipo")
colnames(autos)
colnames(autos) <- c("tipo", "precio", "mpgCiudad", "trenManejo", "pasajeros", "peso")
cautos
autos
levels(autos$tipo)
levels(autos$tipo)[levels(autos$tipo)=="large"] <- "grande"
levels(autos$tipo)
levels(autos$tipo)[levels(autos$tipo)=="large"] <- "grande"
levels(autos$tipo)[levels(autos$tipo)=="small"] <- "chico"
levels(autos$tipo)[levels(autos$tipo)=="midsize"] <- "mediano"
levels(autos$tipo)
autos
levels(autos$trenManejo)
levels(autos$trenManejo)[levels(autos$trenManejo)=="4WD"] <- "4x4"
levels(autos$trenManejo)[levels(autos$trenManejo)=="front"] <- "frontal"
levels(autos$trenManejo)[levels(autos$trenManejo)=="rear"] <- "trasero"
levels(autos$trenManejo)
autos
plot(autos$precio, rep(1, nrow(autos)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
range(autos$precio)
abline(v=c(min(autos$precio), max(autos$precio)), col="red", lwd=3)
assign("mpg.midsize", cars[cars$type=="midsize","mpgCity"], envir=globalenv())
assign("cars", openintro::cars, envir=globalenv())
assign("mpg.midsize", cars[cars$type=="midsize","mpgCity"], envir=globalenv())
mpg.mediano <- mpg.midsize
equal(mpg.mediano, mpg.midsize)
identical(mpg.mediano, mpg.midsize)
mpg.mediano
sort(mpg.mediano)
assign("cars", openintro::cars, envir=globalenv())
assign("mpg.midsize", cars[cars$type=="midsize","mpgCity"], envir=globalenv())
# Creando el conjunto de datos 'autos' a partir de 'cars'
autos <- openintro::cars
# Renombrando nombres de las variables
colnames(autos) <- c("tipo", "precio", "mpgCiudad", "trenManejo", "pasajeros", "peso")
# Renombrando los niveles de 'tipo'
levels(autos$tipo)[levels(autos$tipo)=="large"] <- "grande"
levels(autos$tipo)[levels(autos$tipo)=="small"] <- "chico"
levels(autos$tipo)[levels(autos$tipo)=="midsize"] <- "mediano"
# Renombrando los niveles de 'trenManejo'
levels(autos$trenManejo)[levels(autos$trenManejo)=="4WD"] <- "4x4"
levels(autos$trenManejo)[levels(autos$trenManejo)=="front"] <- "frontal"
levels(autos$trenManejo)[levels(autos$trenManejo)=="rear"] <- "trasero"
# Renombrando 'mpg.midsize'
mpg.mediano <- mpg.midsize
hist(autos$mpgCiudad, xlab="Millas Por Galón (MPG)", main="")
hist(autos$mpgCiudad, xlab = "Millas Por Galón (MPG)", ylab = "Frecuencia", main = "")
abline(h = 25, col = "red", lwd = 3)
cat("\n")
stem(autos$mpgCiudad)
?stem
stem(islands)
cat("\n")
stem(autos$mpgCiudad)
cat("\n")
source('~/.active-rstudio-document', echo=TRUE)
assign("cars", openintro::cars, envir=globalenv())
assign("mpg.midsize", cars[cars$type=="midsize","mpgCity"], envir=globalenv())
# Creando el conjunto de datos 'autos' a partir de 'cars'
autos <- openintro::cars
# Renombrando nombres de las variables
colnames(autos) <- c("tipo", "precio", "mpgCiudad", "trenManejo", "pasajeros", "peso")
# Renombrando los niveles de 'tipo'
levels(autos$tipo)[levels(autos$tipo)=="large"] <- "grande"
levels(autos$tipo)[levels(autos$tipo)=="small"] <- "chico"
levels(autos$tipo)[levels(autos$tipo)=="midsize"] <- "mediano"
# Renombrando los niveles de 'trenManejo'
levels(autos$trenManejo)[levels(autos$trenManejo)=="4WD"] <- "4x4"
levels(autos$trenManejo)[levels(autos$trenManejo)=="front"] <- "frontal"
levels(autos$trenManejo)[levels(autos$trenManejo)=="rear"] <- "trasero"
# Renombrando 'mpg.midsize'
mpg.mediano <- mpg.midsize
# Box plot
boxplot(precio ~ tipo, data = autos, xlab = "Tipo", ylab = "Precio")
tapply(autos$precio, IQR)
sapply(autos$precio, IQR)
lapply(autos$precio, IQR)
tapply(autos$precio, FUN = (IQR, na.rm = TRUE)
tapply(autos$precio, FUN = (IQR, na.rm = TRUE))
tapply(autos$precio, FUN = IQR(na.rm = TRUE))
IQR(autos$precio)
?tapply
tapply(autos$precio, tipo, FUN = IQR(na.rm = TRUE))
tapply(autos$precio, tipo, IQR)
tapply(autos$precio, autos$tipo, IQR)
boxplot(precio ~ tipo, data = autos, xlab = "Tipo", ylab = "Precio")
suma <- summary(autos$precio[autos$tipo=="mediano"])
abline(h = c(suma[2], suma[5]), col = c("blue","green"), lwd = 3)
abline(h = c(suma[2], suma[5]), col = c("blue","green"), lwd = 3)
# Box plot
boxplot(precio ~ tipo, data = autos, xlab = "Tipo", ylab = "Precio")
?omnitest
?swirl::omnitest
swirl()
swirl::swh
swirl::swirl()
lesson <- yaml.load_file('swirl_temp/lesson.yaml')
class(lesson)
lesson[[12]]
find_course('Writing_swirl_Courses')
dir(find_course('Writing_swirl_Courses'))
3
scooby <- c(1969, 2014)
3*3
3*3
3^2
?rmatch_calls
rmatch_calls(quote(?par))
library(swirl)
rmatch_calls(quote(?par))
rmatch_calls(quote(help(par)))
quote(help(package=swirl, topic=omnitest))
rmatch_calls(quote(help(package=swirl, topic=omnitest)))
nxt()
69
x <- 10
x <- 10
x <- 3*x
x <- 2*x
x
y <- 1:9
y <- 1:8
y <- 1:10
assign("cars", openintro::cars, envir=globalenv())
assign("mpg.midsize", cars[cars$type=="midsize","mpgCity"], envir=globalenv())
# Creando el conjunto de datos 'autos' a partir de 'cars'
autos <- openintro::cars
# Renombrando nombres de las variables
colnames(autos) <- c("tipo", "precio", "mpgCiudad", "trenManejo", "pasajeros", "peso")
# Renombrando los niveles de 'tipo'
levels(autos$tipo)[levels(autos$tipo)=="large"] <- "grande"
levels(autos$tipo)[levels(autos$tipo)=="small"] <- "chico"
levels(autos$tipo)[levels(autos$tipo)=="midsize"] <- "mediano"
# Renombrando los niveles de 'trenManejo'
levels(autos$trenManejo)[levels(autos$trenManejo)=="4WD"] <- "4x4"
levels(autos$trenManejo)[levels(autos$trenManejo)=="front"] <- "frontal"
levels(autos$trenManejo)[levels(autos$trenManejo)=="rear"] <- "trasero"
# Renombrando 'mpg.midsize'
mpg.mediano <- mpg.midsize
boxplot(precio ~ tipo, data = autos, xlab = "Tipo", ylab = "Precio")
set.seed(111)
x <- abs(rnorm(1000))
dat <- 2.5-x
hist(dat, main = "Asimetria Izquierda", xlab = "")
abline(v = c(mean(dat), median(dat)), col = (c("blue", "green")), lwd = 3)
set.seed(111)
x <- abs(rnorm(1000))
dat <- 2.5-x
hist(dat, main = "Asimetría Izquierda", xlab = "Frecuencia")
abline(v = c(mean(dat), median(dat)), col = (c("blue", "green")), lwd = 3)
set.seed(111)
x <- abs(rnorm(1000))
dat <- 2.5-x
hist(dat, main = "Asimetría Izquierda", xlab = "", ylab = "Frecuencia")
abline(v = c(mean(dat), median(dat)), col = (c("blue", "green")), lwd = 3)
set.seed(111)
x <- rnorm(1000)
dat <- abs(x)
hist(dat, main = "Asimetría Derecha", xlab = "", ylab = "Frecuencia")
abline(v = c(mean(dat), median(dat)), col = (c("blue", "green")), lwd = 3)
set.seed(111)
x <- rnorm(1000)
dat <- x
hist(dat, main = "Simétrico", xlab = "", ylab = "Frecuencia")
abline(v = c(mean(dat), median(dat)), col = (c("blue", "green")), lwd = 3)
assign("cars", openintro::cars, envir=globalenv())
assign("mpg.midsize", cars[cars$type=="midsize","mpgCity"], envir=globalenv())
# Creando el conjunto de datos 'autos' a partir de 'cars'
autos <- openintro::cars
# Renombrando nombres de las variables
colnames(autos) <- c("tipo", "precio", "mpgCiudad", "trenManejo", "pasajeros", "peso")
# Renombrando los niveles de 'tipo'
levels(autos$tipo)[levels(autos$tipo)=="large"] <- "grande"
levels(autos$tipo)[levels(autos$tipo)=="small"] <- "chico"
levels(autos$tipo)[levels(autos$tipo)=="midsize"] <- "mediano"
# Renombrando los niveles de 'trenManejo'
levels(autos$trenManejo)[levels(autos$trenManejo)=="4WD"] <- "4x4"
levels(autos$trenManejo)[levels(autos$trenManejo)=="front"] <- "frontal"
levels(autos$trenManejo)[levels(autos$trenManejo)=="rear"] <- "trasero"
# Renombrando 'mpg.midsize'
mpg.mediano <- mpg.midsize
hist(autos$mpgCiudad, xlab = "Millas Por Galón (MPG)", ylab = "Frecuencia", main = "")
barplot(tapply(autos$precio, autos$tipo, mean), xlab = "Tipo", ylab = "Precio Medio ($1000s)", col = c("gray", "green", "blue"))
barplot(tapply(cars$price, cars$type, mean), xlab="Type", ylab="Mean Price ($1000s)")
barplot(tapply(autos$precio, autos$tipo, mean), xlab = "Tipo", ylab = "Precio Medio ($1000s)")
abline(h = mean(autos$precio[autos$tipo=="grande"]), col = "red", lwd = 3)
plot(precio ~ peso, data = autos, xlab = "Peso (Libras)", ylab = "Precio ($1000s)")
barplot(tapply(autos$precio, autos$tipo, mean), xlab = "Tipo", ylab = "Precio Medio ($1000s)", col = c("gray", "green", "blue"))
plot(precio ~ peso, data = autos, xlab = "Peso (Libras)", ylab = "Precio ($1000s)")
plot(autos$precio, rep(1, nrow(autos)), ylab="", yaxt="n", xlab="Precio ($1000s)",
xlim=c(5,65))
hist(autos$mpgCiudad, xlab = "Millas Por Galón (MPG)", ylab = "Frecuencia", main = "")
boxplot(precio ~ tipo, data = autos, xlab = "Tipo", ylab = "Precio")
cat("\n")
stem(autos$mpgCiudad)
